---
layout: post
title: Global Exception Handling With Rails 3 and Bugsnag
---
<p>At <a href="https://talentsoup.com">TalentSoup</a>, we recently launched a new application privately to a number of our trusted customers.  For exception handling, I decided to give <a href="http://bugsnag.com">bugsnag</a> a try.  In the past I've used the <a href="https://github.com/rails/exception_notification">exception_notification</a> gem, and have even rolled my own solution for handling exceptions, but for this new app, I thought I'd do something new. I'm a big fan of leveraging existing "solutions" for common tasks, so I can focus on the core business of the application (see <a href="http://fhwang.net/2012/02/19/Buy-vs-build-for-an-early-stage-startup">Buy-vs-build for an early stage startup</a>).</p>

<p>bugsnag has nice <a href="https://bugsnag.com/docs/notifiers/ruby">documentation</a> to help you get started. What I wanted to do was just catch every exception that's generated by the app, regardless of specific type.  As the app matures and we decide what we want to do in a particular case, we'll handle each exception type differently, but for now, a global catch-all will suffice:</p>

<p>
{% highlight ruby %}
class ApplicationController < ActionController::Base
  rescue_from Exception, :with => :handle_public_excepton
  
  protected

  def handle_public_excepton(exception)
    Bugsnag.notify(exception)
    render :template => "shared/exception"
  end
end
{% endhighlight %}
</p>

<p>So we catch every exception, and display a generic error page that lives in <code>app/views/shared/</code>. This wound up being trivial but it was a good excuse to dig into Rails 3 internals and learn about how exceptions are handled within the framework.</p>

<h3>See Also</h3>
<p><a href="http://m.onkey.org/rescue-from-dispatching">rescue_from dispatching</a></p>
<p><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/rescuable.rb">rails/activesupport/lib/active_support/rescuable.rb</a></p>